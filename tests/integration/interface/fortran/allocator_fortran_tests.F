! Generated by genumpireftests.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Copyright (c) 2016-23, Lawrence Livermore National Security, LLC and Umpire
! project contributors. See the COPYRIGHT file for details.
!
! SPDX-License-Identifier: (MIT)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module umpire_fortran_generated_tests

  use iso_c_binding
  use fruit
  use umpire_mod
  implicit none

  contains



      subroutine test_allocate_int_host_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_host_array_1d

    

      subroutine test_allocate_int_host_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_host_array_2d

    

      subroutine test_allocate_int_host_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_host_array_3d

    

      subroutine test_allocate_int_host_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_host_array_4d

    

      subroutine test_allocate_long_host_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_host_array_1d

    

      subroutine test_allocate_long_host_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_host_array_2d

    

      subroutine test_allocate_long_host_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_host_array_3d

    

      subroutine test_allocate_long_host_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_host_array_4d

    

      subroutine test_allocate_float_host_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_host_array_1d

    

      subroutine test_allocate_float_host_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_host_array_2d

    

      subroutine test_allocate_float_host_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_host_array_3d

    

      subroutine test_allocate_float_host_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_host_array_4d

    

      subroutine test_allocate_double_host_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_host_array_1d

    

      subroutine test_allocate_double_host_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_host_array_2d

    

      subroutine test_allocate_double_host_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_host_array_3d

    

      subroutine test_allocate_double_host_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("HOST")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_host_array_4d

    
#ifdef UMPIRE_ENABLE_DEVICE

      subroutine test_allocate_int_device_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_device_array_1d

    

      subroutine test_allocate_int_device_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_device_array_2d

    

      subroutine test_allocate_int_device_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_device_array_3d

    

      subroutine test_allocate_int_device_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_device_array_4d

    

      subroutine test_allocate_long_device_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_device_array_1d

    

      subroutine test_allocate_long_device_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_device_array_2d

    

      subroutine test_allocate_long_device_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_device_array_3d

    

      subroutine test_allocate_long_device_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_device_array_4d

    

      subroutine test_allocate_float_device_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_device_array_1d

    

      subroutine test_allocate_float_device_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_device_array_2d

    

      subroutine test_allocate_float_device_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_device_array_3d

    

      subroutine test_allocate_float_device_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_device_array_4d

    

      subroutine test_allocate_double_device_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_device_array_1d

    

      subroutine test_allocate_double_device_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_device_array_2d

    

      subroutine test_allocate_double_device_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_device_array_3d

    

      subroutine test_allocate_double_device_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("DEVICE")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_device_array_4d

#endif
#ifdef UMPIRE_ENABLE_UM 

      subroutine test_allocate_int_um_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_um_array_1d

    

      subroutine test_allocate_int_um_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_um_array_2d

    

      subroutine test_allocate_int_um_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_um_array_3d

    

      subroutine test_allocate_int_um_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_INT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_int_um_array_4d

    

      subroutine test_allocate_long_um_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_um_array_1d

    

      subroutine test_allocate_long_um_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_um_array_2d

    

      subroutine test_allocate_long_um_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_um_array_3d

    

      subroutine test_allocate_long_um_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        integer(C_LONG), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_long_um_array_4d

    

      subroutine test_allocate_float_um_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_um_array_1d

    

      subroutine test_allocate_float_um_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_um_array_2d

    

      subroutine test_allocate_float_um_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_um_array_3d

    

      subroutine test_allocate_float_um_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_FLOAT), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_float_um_array_4d

    

      subroutine test_allocate_double_um_array_1d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_um_array_1d

    

      subroutine test_allocate_double_um_array_2d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_um_array_2d

    

      subroutine test_allocate_double_um_array_3d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_um_array_3d

    

      subroutine test_allocate_double_um_array_4d
        use iso_c_binding

        type(UmpireResourceManager) rm
        type(UmpireAllocator) allocator

        real(C_DOUBLE), pointer, dimension(:, :, :, :) :: array

        rm = rm%get_instance()
        allocator = rm%get_allocator_by_name("UM")


        call allocator%allocate(array, [10, 10, 10, 10])
        call assert_true(associated(array))

        call allocator%deallocate(array)
        call assert_true(.not. associated(array))

        call allocator%delete()
      end subroutine test_allocate_double_um_array_4d

    
#endif

end module umpire_fortran_generated_tests


program fortran_test
  use fruit
  use umpire_fortran_generated_tests

  implicit none
  logical ok

  call init_fruit

  call test_allocate_int_host_array_1d
  call test_allocate_int_host_array_2d
  call test_allocate_int_host_array_3d
  call test_allocate_int_host_array_4d
  call test_allocate_long_host_array_1d
  call test_allocate_long_host_array_2d
  call test_allocate_long_host_array_3d
  call test_allocate_long_host_array_4d
  call test_allocate_float_host_array_1d
  call test_allocate_float_host_array_2d
  call test_allocate_float_host_array_3d
  call test_allocate_float_host_array_4d
  call test_allocate_double_host_array_1d
  call test_allocate_double_host_array_2d
  call test_allocate_double_host_array_3d
  call test_allocate_double_host_array_4d
#ifdef UMPIRE_ENABLE_DEVICE
  call test_allocate_int_device_array_1d
  call test_allocate_int_device_array_2d
  call test_allocate_int_device_array_3d
  call test_allocate_int_device_array_4d
  call test_allocate_long_device_array_1d
  call test_allocate_long_device_array_2d
  call test_allocate_long_device_array_3d
  call test_allocate_long_device_array_4d
  call test_allocate_float_device_array_1d
  call test_allocate_float_device_array_2d
  call test_allocate_float_device_array_3d
  call test_allocate_float_device_array_4d
  call test_allocate_double_device_array_1d
  call test_allocate_double_device_array_2d
  call test_allocate_double_device_array_3d
  call test_allocate_double_device_array_4d
#endif
#ifdef UMPIRE_ENABLE_UM
  call test_allocate_int_um_array_1d
  call test_allocate_int_um_array_2d
  call test_allocate_int_um_array_3d
  call test_allocate_int_um_array_4d
  call test_allocate_long_um_array_1d
  call test_allocate_long_um_array_2d
  call test_allocate_long_um_array_3d
  call test_allocate_long_um_array_4d
  call test_allocate_float_um_array_1d
  call test_allocate_float_um_array_2d
  call test_allocate_float_um_array_3d
  call test_allocate_float_um_array_4d
  call test_allocate_double_um_array_1d
  call test_allocate_double_um_array_2d
  call test_allocate_double_um_array_3d
  call test_allocate_double_um_array_4d
#endif

  call fruit_summary
  call fruit_finalize

  call is_all_successful(ok)
  if (.not. ok) then
    call exit(1)
  endif
end program fortran_test

